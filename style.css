// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
const CONFIG = {
    PRICES: {
        FOOD: {
            BONE: 20,
            MEAT: 50,
            FISH: 80,
            CAKE: 150
        },
        TOYS: {
            BALL: 50,
            ROPE: 80,
            PLUSH: 120,
            FRISBEE: 200
        },
        CLOTHES: {
            HAT: 100,
            GLASSES: 150,
            SCARF: 200,
            COSTUME: 300
        }
    },
    XP: {
        PER_ACTION: 10,
        TO_LEVEL: 100,
        LEVEL_MULTIPLIER: 1.2
    },
    STATES: {
        HAPPY: 'happy',
        HUNGRY: 'hungry',
        TIRED: 'tired',
        SAD: 'sad'
    },
    DECAY_RATES: {
        HUNGER: 0.5,
        HAPPINESS: 0.3,
        ENERGY: 0.2
    },
    ACHIEVEMENTS: {
        FIRST_STEPS: {
            name: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
            desc: "–ó–∞–≤–µ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞",
            icon: "ü•á",
            condition: (game) => game.stats.happiness > 0,
            reward: 100
        },
        FOOD_LOVER: {
            name: "–ì—É—Ä–º–∞–Ω",
            desc: "–ù–∞–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ 10 —Ä–∞–∑",
            icon: "üçó",
            condition: (game) => game.achievements.feedCount >= 10,
            reward: 200
        },
        PLAYER: {
            name: "–ò–≥—Ä–æ–∫",
            desc: "–ü–æ–∏–≥—Ä–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º 10 —Ä–∞–∑",
            icon: "üéæ",
            condition: (game) => game.achievements.playCount >= 10,
            reward: 200
        },
        RICH: {
            name: "–ë–æ–≥–∞—á",
            desc: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 1000 –º–æ–Ω–µ—Ç",
            icon: "üí∞",
            condition: (game) => game.coins >= 1000,
            reward: 500
        },
        VETERAN: {
            name: "–í–µ—Ç–µ—Ä–∞–Ω",
            desc: "–î–æ—Å—Ç–∏—á—å 5 —É—Ä–æ–≤–Ω—è",
            icon: "üèÖ",
            condition: (game) => game.level >= 5,
            reward: 300
        }
    }
};

// –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
const SHOP_ITEMS = {
    FOOD: [
        { id: 'bone', name: '–ö–æ—Å—Ç—å', price: CONFIG.PRICES.FOOD.BONE, img: 'images/food_bone.png', effect: 20 },
        { id: 'meat', name: '–ú—è—Å–æ', price: CONFIG.PRICES.FOOD.MEAT, img: 'images/food_meat.png', effect: 40 },
        { id: 'fish', name: '–†—ã–±–∞', price: CONFIG.PRICES.FOOD.FISH, img: 'images/food_fish.png', effect: 60 },
        { id: 'cake', name: '–¢–æ—Ä—Ç', price: CONFIG.PRICES.FOOD.CAKE, img: 'images/food_cake.png', effect: 100 }
    ],
    TOYS: [
        { id: 'ball', name: '–ú—è—á–∏–∫', price: CONFIG.PRICES.TOYS.BALL, img: 'images/toy_ball.png', effect: 30 },
        { id: 'rope', name: '–í–µ—Ä–µ–≤–∫–∞', price: CONFIG.PRICES.TOYS.ROPE, img: 'images/toy_rope.png', effect: 50 },
        { id: 'plush', name: '–ü–ª—é—à–∫–∞', price: CONFIG.PRICES.TOYS.PLUSH, img: 'images/toy_plush.png', effect: 70 },
        { id: 'frisbee', name: '–§—Ä–∏—Å–±–∏', price: CONFIG.PRICES.TOYS.FRISBEE, img: 'images/toy_frisbee.png', effect: 100 }
    ],
    CLOTHES: [
        { id: 'hat', name: '–®–ª—è–ø–∞', price: CONFIG.PRICES.CLOTHES.HAT, img: 'images/clothes_hat.png', imgWear: 'images/clothes_hat_wear.png' },
        { id: 'glasses', name: '–û—á–∫–∏', price: CONFIG.PRICES.CLOTHES.GLASSES, img: 'images/clothes_glasses.png', imgWear: 'images/clothes_glasses_wear.png' },
        { id: 'scarf', name: '–®–∞—Ä—Ñ', price: CONFIG.PRICES.CLOTHES.SCARF, img: 'images/clothes_scarf.png', imgWear: 'images/clothes_scarf_wear.png' },
        { id: 'costume', name: '–ö–æ—Å—Ç—é–º', price: CONFIG.PRICES.CLOTHES.COSTUME, img: 'images/clothes_costume.png', imgWear: 'images/clothes_costume_wear.png' }
    ]
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const game = {
    stats: {
        hunger: 80,
        happiness: 90,
        energy: 100
    },
    coins: 500,
    xp: 0,
    level: 1,
    state: CONFIG.STATES.HAPPY,
    lastAction: Date.now(),
    inventory: {
        food: {
            bone: 5,
            meat: 0,
            fish: 0,
            cake: 0
        },
        toys: {
            ball: 2,
            rope: 0,
            plush: 0,
            frisbee: 0
        },
        clothes: {
            hat: false,
            glasses: false,
            scarf: false,
            costume: false
        }
    },
    wearing: {
        hat: false,
        glasses: false,
        scarf: false,
        costume: false
    },
    achievements: {
        unlocked: {},
        feedCount: 0,
        playCount: 0,
        careCount: 0
    },
    settings: {
        sound: true,
        notifications: true
    }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const DOM = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    pet: document.getElementById('super-pet'),
    hungerBar: document.getElementById('hunger-bar'),
    happinessBar: document.getElementById('happiness-bar'),
    energyBar: document.getElementById('energy-bar'),
    coinsDisplay: document.getElementById('coins'),
    xpProgress: document.getElementById('xp-progress'),
    levelDisplay: document.getElementById('level'),
    speechBubble: document.getElementById('speech-bubble'),
    moodLight: document.getElementById('mood-light'),
    petClothes: document.getElementById('pet-clothes'),
    notification: document.getElementById('notification'),
    effectsLayer: document.getElementById('effects-layer'),
    
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    feedBtn: document.getElementById('feed-btn'),
    playBtn: document.getElementById('play-btn'),
    careBtn: document.getElementById('care-btn'),
    shopBtn: document.getElementById('shop-btn'),
    
    // –°—á–µ—Ç—á–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    foodCount: document.getElementById('food-count'),
    toyCount: document.getElementById('toy-count'),
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    modalOverlay: document.getElementById('modal-overlay'),
    shopModal: document.getElementById('shop-modal'),
    inventoryModal: document.getElementById('inventory-modal'),
    achievementsModal: document.getElementById('achievements-modal'),
    
    // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫
    closeShop: document.getElementById('close-shop'),
    closeInventory: document.getElementById('close-inventory'),
    closeAchievements: document.getElementById('close-achievements'),
    
    // –í–∫–ª–∞–¥–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
    shopTabs: document.querySelectorAll('.shop-tabs .tab-btn'),
    foodItems: document.getElementById('food-items'),
    toysItems: document.getElementById('toys-items'),
    clothesItems: document.getElementById('clothes-items'),
    
    // –í–∫–ª–∞–¥–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    inventoryTabs: document.querySelectorAll('.inventory-tabs .tab-btn'),
    invFoodItems: document.getElementById('inv-food-items'),
    invToysItems: document.getElementById('inv-toys-items'),
    invClothesItems: document.getElementById('inv-clothes-items'),
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievementsList: document.getElementById('achievements-list'),
    
    // –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    soundClick: document.getElementById('sound-click'),
    soundCoin: document.getElementById('sound-coin'),
    soundBark: document.getElementById('sound-bark'),
    soundEat: document.getElementById('sound-eat'),
    soundLevelup: document.getElementById('sound-levelup')
};

// –§—Ä–∞–∑—ã –ø–∏—Ç–æ–º—Ü–∞
const PHRASES = {
    HAPPY: [
        "–Ø —Ç–∞–∫ —Ç–µ–±—è –ª—é–±–ª—é!",
        "–¢—ã –ª—É—á—à–∏–π —Ö–æ–∑—è–∏–Ω!",
        "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º?",
        "–ì–∞–≤-–≥–∞–≤!",
        "–ü–æ—á–µ—à–∏ –º–Ω–µ –∂–∏–≤–æ—Ç–∏–∫!",
        "–Ø —Å—á–∞—Å—Ç–ª–∏–≤!",
        "–¢—ã –º–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥!",
        "–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞!",
        "–Ø –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!",
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –µ—Å—Ç—å!"
    ],
    HUNGRY: [
        "–Ø –≥–æ–ª–æ–¥–Ω—ã–π!",
        "–•–æ—á—É –≤–∫—É—Å–Ω—è—à–∫—É!",
        "–ü–æ–∫–æ—Ä–º–∏ –º–µ–Ω—è!",
        "–ì–¥–µ –º–æ—è –µ–¥–∞?",
        "üçóüçóüçó",
        "–Ø –±—ã –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–µ—Ä–µ–∫—É—Å–∞",
        "–ú–æ–π –∂–∏–≤–æ—Ç–∏–∫ —É—Ä—á–∏—Ç...",
        "–ö–æ–≥–¥–∞ –æ–±–µ–¥?",
        "–Ø –º–æ–≥—É —Å—ä–µ—Å—Ç—å —Å–ª–æ–Ω–∞!",
        "–•–æ—á—É –µ—Å—Ç—å!"
    ],
    SAD: [
        "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ...",
        "–¢—ã –º–µ–Ω—è –Ω–µ –ª—é–±–∏—à—å?",
        "–ü–æ—á–µ–º—É —Ç—ã –º–µ–Ω—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å?",
        "–Ø —Å–∫—É—á–∞—é...",
        "üò¢üò¢üò¢",
        "–ú–Ω–µ –æ–¥–∏–Ω–æ–∫–æ...",
        "–¢—ã –∑–∞–±—ã–ª –æ–±–æ –º–Ω–µ?",
        "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –±—Ä–æ—à–µ–Ω–Ω—ã–º",
        "–ù–∏–∫—Ç–æ –º–µ–Ω—è –Ω–µ –ª—é–±–∏—Ç...",
        "–ú–Ω–µ –Ω—É–∂–Ω–æ –≤–Ω–∏–º–∞–Ω–∏–µ"
    ],
    TIRED: [
        "–Ø —É—Å—Ç–∞–ª...",
        "–•–æ—á—É —Å–ø–∞—Ç—å",
        "–î–∞–≤–∞–π –æ—Ç–¥–æ—Ö–Ω–µ–º",
        "–ú–Ω–µ –Ω—É–∂–Ω–æ –≤–∑–¥—Ä–µ–º–Ω—É—Ç—å",
        "üò¥üò¥üò¥",
        "–ì–ª–∞–∑–∫–∏ —Å–ª–∏–ø–∞—é—Ç—Å—è...",
        "–Ø –µ–ª–µ —Å—Ç–æ—é –Ω–∞ –ª–∞–ø–∞—Ö",
        "–ú–Ω–µ –±—ã –ø–æ—Å–ø–∞—Ç—å",
        "–¢–∞–∫ —É—Å—Ç–∞–ª...",
        "–ü–æ–π–¥—É –ø–æ–ª–µ–∂—É"
    ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function initTelegramApp() {
    try {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
        Telegram.WebApp.enableClosingConfirmation();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (Telegram.WebApp.initDataUnsafe.user) {
            const savedData = Telegram.WebApp.CloudStorage.getItem('pet_game_data');
            if (savedData) {
                loadGame(JSON.parse(savedData));
            }
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        Telegram.WebApp.MainButton.setText('–ú–µ–Ω—é');
        Telegram.WebApp.MainButton.onClick(showMainMenu);
        Telegram.WebApp.MainButton.show();
    } catch (e) {
        console.error('Telegram WebApp error:', e);
    }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu() {
    playSound('click');
    
    const menuItems = [
        { text: 'üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback: showInventory },
        { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback: showAchievements },
        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback: showSettings },
        { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback: () => Telegram.WebApp.MainButton.hide() }
    ];
    
    Telegram.WebApp.showPopup({
        title: '–ú–µ–Ω—é',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        buttons: menuItems.map(item => ({
            id: item.text,
            type: 'default',
            text: item.text
        }))
    }, (buttonId) => {
        const selectedItem = menuItems.find(item => item.text === buttonId);
        if (selectedItem) selectedItem.callback();
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettings() {
    const settingsItems = [
        { 
            text: game.settings.sound ? 'üîä –ó–≤—É–∫: –í–∫–ª' : 'üîá –ó–≤—É–∫: –í—ã–∫–ª', 
            callback: () => {
                game.settings.sound = !game.settings.sound;
                showSettings();
            } 
        },
        { 
            text: game.settings.notifications ? 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª' : 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª', 
            callback: () => {
                game.settings.notifications = !game.settings.notifications;
                showSettings();
            } 
        },
        { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback: () => Telegram.WebApp.close() }
    ];
    
    Telegram.WebApp.showPopup({
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        message: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        buttons: settingsItems.map(item => ({
            id: item.text,
            type: 'default',
            text: item.text
        }))
    }, (buttonId) => {
        const selectedItem = settingsItems.find(item => item.text === buttonId);
        if (selectedItem) selectedItem.callback();
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    try {
        if (Telegram.WebApp.initDataUnsafe.user) {
            Telegram.WebApp.CloudStorage.setItem('pet_game_data', JSON.stringify(game));
        } else {
            localStorage.setItem('pet_game_data', JSON.stringify(game));
        }
    } catch (e) {
        console.error('Save error:', e);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
function loadGame(savedData) {
    if (savedData) {
        Object.assign(game, savedData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–¥–µ–∂–¥—É –ø–∏—Ç–æ–º—Ü–∞
        updatePetClothes();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUI();
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
function playSound(soundName) {
    if (!game.settings.sound) return;
    
    try {
        const sound = DOM[`sound${soundName.charAt(0).toUpperCase() + soundName.slice(1)}`];
        if (sound) {
            sound.currentTime = 0;
            sound.play().catch(e => console.error('Sound play error:', e));
        }
    } catch (e) {
        console.error('Sound error:', e);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    DOM.hungerBar.style.width = `${game.stats.hunger}%`;
    DOM.happinessBar.style.width = `${game.stats.happiness}%`;
    DOM.energyBar.style.width = `${game.stats.energy}%`;
    DOM.coinsDisplay.textContent = game.coins;
    
    // –û–ø—ã—Ç –∏ —É—Ä–æ–≤–µ–Ω—å
    const xpNeeded = CONFIG.XP.TO_LEVEL * Math.pow(CONFIG.XP.LEVEL_MULTIPLIER, game.level - 1);
    DOM.xpProgress.style.width = `${(game.xp / xpNeeded) * 100}%`;
    DOM.levelDisplay.textContent = game.level;
    
    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    const foodTotal = Object.values(game.inventory.food).reduce((a, b) => a + b, 0);
    const toysTotal = Object.values(game.inventory.toys).reduce((a, b) => a + b, 0);
    DOM.foodCount.textContent = foodTotal;
    DOM.toyCount.textContent = toysTotal;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    updatePetState();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
    saveGame();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
function updatePetState() {
    const prevState = game.state;
    
    if (game.stats.hunger < 30 || game.stats.happiness < 30) {
        game.state = CONFIG.STATES.SAD;
    } else if (game.stats.hunger < 60) {
        game.state = CONFIG.STATES.HUNGRY;
    } else if (game.stats.energy < 30) {
        game.state = CONFIG.STATES.TIRED;
    } else {
        game.state = CONFIG.STATES.HAPPY;
    }
    
    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—É
    if (prevState !== game.state) {
        showRandomPhrase();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    updatePetAppearance();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–∏—Ç–æ–º—Ü–∞
function updatePetAppearance() {
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    let lightColor, lightOpacity;
    
    switch(game.state) {
        case CONFIG.STATES.HAPPY:
            lightColor = 'rgba(120, 115, 245, 0.3)';
            lightOpacity = 0.8;
            break;
        case CONFIG.STATES.HUNGRY:
            lightColor = 'rgba(255, 110, 199, 0.3)';
            lightOpacity = 0.6;
            break;
        case CONFIG.STATES.SAD:
            lightColor = 'rgba(255, 110, 199, 0.2)';
            lightOpacity = 0.4;
            break;
        case CONFIG.STATES.TIRED:
            lightColor = 'rgba(255, 200, 69, 0.3)';
            lightOpacity = 0.5;
            break;
    }
    
    DOM.moodLight.style.background = `radial-gradient(circle, ${lightColor} 0%, rgba(255,255,255,0) 70%)`;
    DOM.moodLight.style.opacity = lightOpacity;
    
    // –ú–∏–∫—Ä–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (game.state === CONFIG.STATES.HAPPY) {
        DOM.pet.classList.add('animate__animated', 'animate__pulse');
        setTimeout(() => {
            DOM.pet.classList.remove('animate__animated', 'animate__pulse');
        }, 1000);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã –ø–∏—Ç–æ–º—Ü–∞
function updatePetClothes() {
    let clothesHTML = '';
    
    for (const [item, isWearing] of Object.entries(game.wearing)) {
        if (isWearing) {
            const clothesItem = SHOP_ITEMS.CLOTHES.find(c => c.id === item);
            if (clothesItem) {
                clothesHTML += `<img src="${clothesItem.imgWear}" class="clothes-item" data-item="${item}" style="position:absolute;top:0;left:0;width:100%;height:100%;">`;
            }
        }
    }
    
    DOM.petClothes.innerHTML = clothesHTML;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—á—å
function showSpeech(text) {
    if (!game.settings.notifications) return;
    
    DOM.speechBubble.textContent = text;
    DOM.speechBubble.style.opacity = '1';
    DOM.speechBubble.style.top = '20%';
    
    setTimeout(() => {
        DOM.speechBubble.style.opacity = '0';
    }, 2000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(text, type = 'info') {
    if (!game.settings.notifications) return;
    
    DOM.notification.textContent = text;
    DOM.notification.style.opacity = '1';
    
    // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch(type) {
        case 'success':
            DOM.notification.style.background = 'var(--success)';
            break;
        case 'warning':
            DOM.notification.style.background = 'var(--warning)';
            break;
        case 'error':
            DOM.notification.style.background = 'var(--danger)';
            break;
        default:
            DOM.notification.style.background = 'var(--primary)';
    }
    
    setTimeout(() => {
        DOM.notification.style.opacity = '0';
    }, 2000);
}

// –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç
function addXP(amount) {
    const xpNeeded = CONFIG.XP.TO_LEVEL * Math.pow(CONFIG.XP.LEVEL_MULTIPLIER, game.level - 1);
    game.xp += amount;
    
    if (game.xp >= xpNeeded) {
        game.level++;
        game.xp = game.xp - xpNeeded;
        showNotification(`üéâ –£—Ä–æ–≤–µ–Ω—å ${game.level}!`, 'success');
        playSound('levelup');
        
        // –≠—Ñ—Ñ–µ–∫—Ç –∑–≤–µ–∑–¥
        createStars(10);
    }
    
    updateUI();
}

// –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã
function addCoins(amount) {
    game.coins += amount;
    showNotification(`+${amount} –º–æ–Ω–µ—Ç`, 'success');
    playSound('coin');
    updateUI();
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å–µ—Ä–¥–µ—á–µ–∫
function createHearts(count = 5) {
    for (let i = 0; i < count; i++) {
        setTimeout(() => {
            const heart = document.createElement('div');
            heart.className = 'heart-effect';
            heart.innerHTML = '‚ù§Ô∏è';
            heart.style.left = `${40 + Math.random() * 20}%`;
            heart.style.fontSize = `${24 + Math.random() * 12}px`;
            heart.style.animationDuration = `${2 + Math.random()}s`;
            DOM.effectsLayer.appendChild(heart);
            
            setTimeout(() => heart.remove(), 3000);
        }, i * 200);
    }
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –º–æ–Ω–µ—Ç
function createCoins(count = 3) {
    for (let i = 0; i < count; i++) {
        setTimeout(() => {
            const coin = document.createElement('div');
            coin.className = 'coin-effect';
            coin.style.left = `${40 + Math.random() * 20}%`;
            coin.style.animationDuration = `${1.5 + Math.random()}s`;
            DOM.effectsLayer.appendChild(coin);
            
            setTimeout(() => coin.remove(), 2000);
        }, i * 300);
    }
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∑–≤–µ–∑–¥
function createStars(count = 5) {
    for (let i = 0; i < count; i++) {
        setTimeout(() => {
            const star = document.createElement('div');
            star.className = 'star-effect';
            star.innerHTML = '‚≠ê';
            star.style.left = `${40 + Math.random() * 20}%`;
            star.style.fontSize = `${24 + Math.random() * 12}px`;
            star.style.animationDuration = `${2 + Math.random()}s`;
            DOM.effectsLayer.appendChild(star);
            
            setTimeout(() => star.remove(), 3000);
        }, i * 200);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
function showRandomPhrase() {
    if (game.state === CONFIG.STATES.HAPPY) {
        const phrase = PHRASES.HAPPY[Math.floor(Math.random() * PHRASES.HAPPY.length)];
        showSpeech(phrase);
    } else if (game.state === CONFIG.STATES.HUNGRY) {
        const phrase = PHRASES.HUNGRY[Math.floor(Math.random() * PHRASES.HUNGRY.length)];
        showSpeech(phrase);
    } else if (game.state === CONFIG.STATES.SAD) {
        const phrase = PHRASES.SAD[Math.floor(Math.random() * PHRASES.SAD.length)];
        showSpeech(phrase);
    } else if (game.state === CONFIG.STATES.TIRED) {
        const phrase = PHRASES.TIRED[Math.floor(Math.random() * PHRASES.TIRED.length)];
        showSpeech(phrase);
    }
}

// –ö–æ—Ä–º–ª–µ–Ω–∏–µ
function feed() {
    playSound('click');
    
    if (game.stats.hunger >= 100) {
        showSpeech("–Ø –Ω–µ –≥–æ–ª–æ–¥–µ–Ω!");
        return;
    }
    
    const foodTotal = Object.values(game.inventory.food).reduce((a, b) => a + b, 0);
    if (foodTotal <= 0) {
        showNotification("–ù–µ—Ç –µ–¥—ã! –ö—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 'warning');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –µ–¥—ã
    const foodItems = Object.entries(game.inventory.food)
        .filter(([_, count]) => count > 0)
        .map(([foodId, _]) => {
            const foodItem = SHOP_ITEMS.FOOD.find(item => item.id === foodId);
            return {
                text: `${foodItem.name} (${game.inventory.food[foodId]})`,
                callback: () => useFoodItem(foodId)
            };
        });
    
    if (foodItems.length === 0) return;
    
    Telegram.WebApp.showPopup({
        title: '–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥—É',
        message: '–ö–∞–∫–æ–π –µ–¥–æ–π –ø–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞?',
        buttons: foodItems.map((item, index) => ({
            id: `food_${index}`,
            type: 'default',
            text: item.text
        }))
    }, (buttonId) => {
        const index = parseInt(buttonId.split('_')[1]);
        if (!isNaN(index) && foodItems[index]) {
            foodItems[index].callback();
        }
    });
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –µ–¥—ã
function useFoodItem(foodId) {
    if (game.inventory.food[foodId] <= 0) return;
    
    game.inventory.food[foodId]--;
    const foodItem = SHOP_ITEMS.FOOD.find(item => item.id === foodId);
    
    game.stats.hunger = Math.min(100, game.stats.hunger + foodItem.effect);
    game.stats.happiness = Math.min(100, game.stats.happiness + foodItem.effect / 2);
    game.lastAction = Date.now();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    createHearts(8);
    playSound('eat');
    addXP(CONFIG.XP.PER_ACTION);
    game.achievements.feedCount++;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const originalSrc = DOM.pet.src;
    DOM.pet.src = 'images/dog_eating.png';
    
    setTimeout(() => {
        DOM.pet.src = originalSrc;
        showSpeech("–í–∫—É—Å–Ω–æ! –°–ø–∞—Å–∏–±–æ!");
        updateUI();
    }, 1500);
}

// –ò–≥—Ä–∞
function play() {
    playSound('click');
    
    if (game.stats.energy < 20) {
        showSpeech("–Ø —É—Å—Ç–∞–ª...");
        return;
    }
    
    const toysTotal = Object.values(game.inventory.toys).reduce((a, b) => a + b, 0);
    if (toysTotal <= 0) {
        showNotification("–ù–µ—Ç –∏–≥—Ä—É—à–µ–∫! –ö—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 'warning');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—É—à–∫–∏
    const toyItems = Object.entries(game.inventory.toys)
        .filter(([_, count]) => count > 0)
        .map(([toyId, _]) => {
            const toyItem = SHOP_ITEMS.TOYS.find(item => item.id === toyId);
            return {
                text: `${toyItem.name} (${game.inventory.toys[toyId]})`,
                callback: () => useToyItem(toyId)
            };
        });
    
    if (toyItems.length === 0) return;
    
    Telegram.WebApp.showPopup({
        title: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É—à–∫—É',
        message: '–° —á–µ–º –ø–æ–∏–≥—Ä–∞—Ç—å?',
        buttons: toyItems.map((item, index) => ({
            id: `toy_${index}`,
            type: 'default',
            text: item.text
        }))
    }, (buttonId) => {
        const index = parseInt(buttonId.split('_')[1]);
        if (!isNaN(index) && toyItems[index]) {
            toyItems[index].callback();
        }
    });
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–≥—Ä—É—à–∫—É
function useToyItem(toyId) {
    if (game.inventory.toys[toyId] <= 0) return;
    
    const toyItem = SHOP_ITEMS.TOYS.find(item => item.id === toyId);
    
    game.stats.happiness = Math.min(100, game.stats.happiness + toyItem.effect);
    game.stats.energy = Math.max(0, game.stats.energy - 20);
    game.stats.hunger = Math.max(0, game.stats.hunger - 10);
    game.lastAction = Date.now();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    createHearts(10);
    playSound('bark');
    addXP(CONFIG.XP.PER_ACTION);
    game.achievements.playCount++;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const originalSrc = DOM.pet.src;
    DOM.pet.src = 'images/dog_playing.png';
    
    setTimeout(() => {
        DOM.pet.src = originalSrc;
        showSpeech("–≠—Ç–æ –±—ã–ª–æ –≤–µ—Å–µ–ª–æ!");
        updateUI();
    }, 2000);
}

// –£—Ö–æ–¥
function care() {
    playSound('click');
    
    if (game.stats.energy >= 90) {
        showSpeech("–Ø –Ω–µ —Ö–æ—á—É —Å–ø–∞—Ç—å!");
        return;
    }
    
    game.stats.energy = 100;
    game.stats.happiness = Math.min(100, game.stats.happiness + 15);
    game.stats.hunger = Math.max(0, game.stats.hunger - 10);
    game.lastAction = Date.now();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    addXP(CONFIG.XP.PER_ACTION * 2);
    game.achievements.careCount++;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const originalSrc = DOM.pet.src;
    DOM.pet.src = 'images/dog_sleeping.png';
    
    setTimeout(() => {
        DOM.pet.src = originalSrc;
        showSpeech("–Ø –≤—ã—Å–ø–∞–ª—Å—è!");
        updateUI();
    }, 3000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
function showShop() {
    playSound('click');
    DOM.modalOverlay.classList.add('active');
    DOM.shopModal.classList.add('active');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
    fillShopItems();
}

// –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function fillShopItems() {
    // –ï–¥–∞
    DOM.foodItems.innerHTML = SHOP_ITEMS.FOOD.map(item => `
        <div class="shop-item" data-id="${item.id}">
            <img src="${item.img}" class="shop-item-img">
            <div class="shop-item-name">${item.name}</div>
            <div class="shop-item-price">
                <img src="images/coin.png"> ${item.price}
            </div>
            <button class="buy-btn" data-item="${item.id}" data-type="food">
                –ö—É–ø–∏—Ç—å
            </button>
        </div>
    `).join('');
    
    // –ò–≥—Ä—É—à–∫–∏
    DOM.toysItems.innerHTML = SHOP_ITEMS.TOYS.map(item => `
        <div class="shop-item" data-id="${item.id}">
            <img src="${item.img}" class="shop-item-img">
            <div class="shop-item-name">${item.name}</div>
            <div class="shop-item-price">
                <img src="images/coin.png"> ${item.price}
            </div>
            <button class="buy-btn" data-item="${item.id}" data-type="toys">
                –ö—É–ø–∏—Ç—å
            </button>
        </div>
    `).join('');
    
    // –û–¥–µ–∂–¥–∞
    DOM.clothesItems.innerHTML = SHOP_ITEMS.CLOTHES.map(item => `
        <div class="shop-item" data-id="${item.id}">
            <img src="${item.img}" class="shop-item-img">
            <div class="shop-item-name">${item.name}</div>
            <div class="shop-item-price">
                <img src="images/coin.png"> ${item.price}
            </div>
            <button class="buy-btn" data-item="${item.id}" data-type="clothes">
                ${game.inventory.clothes[item.id] ? '–ö—É–ø–ª–µ–Ω–æ' : '–ö—É–ø–∏—Ç—å'}
            </button>
        </div>
    `).join('');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
    document.querySelectorAll('.buy-btn').forEach(btn => {
        btn.addEventListener('click', () => buyItem(
            btn.dataset.item, 
            btn.dataset.type
        ));
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
function showInventory() {
    playSound('click');
    DOM.modalOverlay.classList.add('active');
    DOM.inventoryModal.classList.add('active');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    fillInventoryItems();
}

// –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
function fillInventoryItems() {
    // –ï–¥–∞
    DOM.invFoodItems.innerHTML = SHOP_ITEMS.FOOD.map(item => {
        const count = game.inventory.food[item.id];
        return `
            <div class="inventory-item" data-id="${item.id}">
                <img src="${item.img}" class="inventory-item-img">
                <div class="inventory-item-name">${item.name}</div>
                <div class="inventory-item-count">${count} —à—Ç.</div>
                <button class="use-btn" data-item="${item.id}" data-type="food" ${count <= 0 ? 'disabled' : ''}>
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                </button>
            </div>
        `;
    }).join('');
    
    // –ò–≥—Ä—É—à–∫–∏
    DOM.invToysItems.innerHTML = SHOP_ITEMS.TOYS.map(item => {
        const count = game.inventory.toys[item.id];
        return `
            <div class="inventory-item" data-id="${item.id}">
                <img src="${item.img}" class="inventory-item-img">
                <div class="inventory-item-name">${item.name}</div>
                <div class="inventory-item-count">${count} —à—Ç.</div>
                <button class="use-btn" data-item="${item.id}" data-type="toys" ${count <= 0 ? 'disabled' : ''}>
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                </button>
            </div>
        `;
    }).join('');
    
    // –û–¥–µ–∂–¥–∞
    DOM.invClothesItems.innerHTML = SHOP_ITEMS.CLOTHES.map(item => {
        const hasItem = game.inventory.clothes[item.id];
        const isWearing = game.wearing[item.id];
        
        return `
            <div class="inventory-item" data-id="${item.id}">
                <img src="${item.img}" class="inventory-item-img">
                <div class="inventory-item-name">${item.name}</div>
                <div class="inventory-item-count">${hasItem ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</div>
                <button class="use-btn" data-item="${item.id}" data-type="clothes" ${!hasItem ? 'disabled' : ''}>
                    ${isWearing ? '–°–Ω—è—Ç—å' : '–ù–∞–¥–µ—Ç—å'}
                </button>
            </div>
        `;
    }).join('');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    document.querySelectorAll('.use-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const itemType = btn.dataset.type;
            const itemId = btn.dataset.item;
            
            if (itemType === 'food') {
                useFoodItem(itemId);
                closeModal();
            } else if (itemType === 'toys') {
                useToyItem(itemId);
                closeModal();
            } else if (itemType === 'clothes') {
                toggleClothes(itemId);
                fillInventoryItems(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            }
        });
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function showAchievements() {
    playSound('click');
    DOM.modalOverlay.classList.add('active');
    DOM.achievementsModal.classList.add('active');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    fillAchievements();
}

// –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function fillAchievements() {
    DOM.achievementsList.innerHTML = Object.entries(CONFIG.ACHIEVEMENTS).map(([key, achievement]) => {
        const isUnlocked = game.achievements.unlocked[key];
        const isCompleted = achievement.condition(game);
        
        return `
            <div class="achievement ${isUnlocked ? '' : 'locked'}">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-desc">${achievement.desc}</div>
                ${!isUnlocked ? `
                    <div class="achievement-progress">
                        <div class="achievement-progress-bar" style="width: ${isCompleted ? '100%' : '0%'}"></div>
                    </div>
                    <div class="achievement-reward">–ù–∞–≥—Ä–∞–¥–∞: ${achievement.reward} –º–æ–Ω–µ—Ç</div>
                ` : `
                    <div class="achievement-completed">‚úÖ –ü–æ–ª—É—á–µ–Ω–æ</div>
                `}
            </div>
        `;
    }).join('');
}

// –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
function buyItem(itemId, itemType) {
    playSound('click');
    
    let price = 0;
    let item;
    
    if (itemType === 'food') {
        item = SHOP_ITEMS.FOOD.find(i => i.id === itemId);
        price = item.price;
        
        if (game.coins >= price) {
            game.coins -= price;
            game.inventory.food[itemId]++;
            showNotification(`–ö—É–ø–ª–µ–Ω–æ: ${item.name}`, 'success');
            playSound('coin');
            createCoins(3);
        } else {
            showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", 'warning');
            return;
        }
    } else if (itemType === 'toys') {
        item = SHOP_ITEMS.TOYS.find(i => i.id === itemId);
        price = item.price;
        
        if (game.coins >= price) {
            game.coins -= price;
            game.inventory.toys[itemId]++;
            showNotification(`–ö—É–ø–ª–µ–Ω–æ: ${item.name}`, 'success');
            playSound('coin');
            createCoins(3);
        } else {
            showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", 'warning');
            return;
        }
    } else if (itemType === 'clothes') {
        item = SHOP_ITEMS.CLOTHES.find(i => i.id === itemId);
        price = item.price;
        
        if (game.inventory.clothes[itemId]) {
            showNotification("–£–∂–µ –∫—É–ø–ª–µ–Ω–æ", 'warning');
            return;
        }
        
        if (game.coins >= price) {
            game.coins -= price;
            game.inventory.clothes[itemId] = true;
            showNotification(`–ö—É–ø–ª–µ–Ω–æ: ${item.name}`, 'success');
            playSound('coin');
            createCoins(5);
        } else {
            showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", 'warning');
            return;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    fillShopItems();
    updateUI();
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–¥–µ–∂–¥—É
function toggleClothes(itemId) {
    game.wearing[itemId] = !game.wearing[itemId];
    updatePetClothes();
    playSound('click');
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function checkAchievements() {
    let newAchievements = 0;
    
    for (const [key, achievement] of Object.entries(CONFIG.ACHIEVEMENTS)) {
        if (!game.achievements.unlocked[key] && achievement.condition(game)) {
            game.achievements.unlocked[key] = true;
            addCoins(achievement.reward);
            showNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}`, 'success');
            newAchievements++;
        }
    }
    
    if (newAchievements > 0) {
        createStars(15);
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeModal() {
    DOM.modalOverlay.classList.remove('active');
    DOM.shopModal.classList.remove('active');
    DOM.inventoryModal.classList.remove('active');
    DOM.achievementsModal.classList.remove('active');
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
    const now = Date.now();
    const hoursPassed = (now - game.lastAction) / (1000 * 60 * 60);
    
    // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    if (hoursPassed > 0.5) { // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç
        const decayFactor = Math.min(5, hoursPassed); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä —É—Ö—É–¥—à–µ–Ω–∏—è - 5
        
        game.stats.hunger = Math.max(0, game.stats.hunger - CONFIG.DECAY_RATES.HUNGER * decayFactor);
        game.stats.happiness = Math.max(0, game.stats.happiness - CONFIG.DECAY_RATES.HAPPINESS * decayFactor);
        game.stats.energy = Math.max(0, game.stats.energy - CONFIG.DECAY_RATES.ENERGY * decayFactor);
    }
    
    updateUI();
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã (10% —à–∞–Ω—Å)
    if (Math.random() > 0.9) {
        showRandomPhrase();
    }
}

// –ö–ª–∏–∫ –ø–æ –ø–∏—Ç–æ–º—Ü—É
DOM.pet.addEventListener('click', () => {
    playSound('bark');
    
    if (game.state === CONFIG.STATES.HAPPY) {
        DOM.pet.classList.add('animate__animated', 'animate__bounce');
        setTimeout(() => {
            DOM.pet.classList.remove('animate__animated', 'animate__bounce');
        }, 1000);
        
        showRandomPhrase();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–Ω–æ–ø–æ–∫
DOM.feedBtn.addEventListener('click', feed);
DOM.playBtn.addEventListener('click', play);
DOM.careBtn.addEventListener('click', care);
DOM.shopBtn.addEventListener('click', showShop);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
DOM.closeShop.addEventListener('click', closeModal);
DOM.closeInventory.addEventListener('click', closeModal);
DOM.closeAchievements.addEventListener('click', closeModal);
DOM.modalOverlay.addEventListener('click', closeModal);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
DOM.shopTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        DOM.shopTabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        
        const tabId = tab.dataset.tab + '-items';
        document.querySelectorAll('.shop-items').forEach(item => item.classList.add('hidden'));
        document.getElementById(tabId).classList.remove('hidden');
        
        playSound('click');
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
DOM.inventoryTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        DOM.inventoryTabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        
        const tabId = 'inv-' + tab.dataset.tab + '-items';
        document.querySelectorAll('.inventory-items').forEach(item => item.classList.add('hidden'));
        document.getElementById(tabId).classList.remove('hidden');
        
        playSound('click');
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    initTelegramApp();
    updateUI();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–µ—Å–ª–∏ –Ω–µ—Ç Telegram WebApp)
    if (!Telegram.WebApp.initDataUnsafe.user) {
        const savedData = localStorage.getItem('pet_game_data');
        if (savedData) {
            loadGame(JSON.parse(savedData));
        }
    }
    
    // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
    setInterval(gameLoop, 60000);
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
        showSpeech("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø—ë—Å–∏–∫!");
    }, 1000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    checkAchievements();
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', initGame);
