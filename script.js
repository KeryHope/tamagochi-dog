// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
const CONFIG = {
    PRICES: {
        FOOD: 20,
        TOY: 50,
        CLOTHES: 100
    },
    XP: {
        PER_ACTION: 10,
        TO_LEVEL: 100,
        LEVEL_MULTIPLIER: 1.2
    },
    STATES: {
        HAPPY: 'happy',
        HUNGRY: 'hungry',
        TIRED: 'tired',
        SAD: 'sad'
    },
    DECAY_RATES: {
        HUNGER: 0.5,
        HAPPINESS: 0.3,
        ENERGY: 0.2
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const game = {
    stats: {
        hunger: 80,
        happiness: 90,
        energy: 100
    },
    coins: 500,
    xp: 0,
    level: 1,
    state: CONFIG.STATES.HAPPY,
    lastAction: Date.now(),
    inventory: {
        food: 5,
        toys: 2,
        clothes: 0
    },
    achievements: {
        firstFeed: false,
        firstPlay: false,
        firstLevel: false
    },
    settings: {
        sound: true,
        notifications: true
    }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const DOM = {
    pet: document.getElementById('super-pet'),
    hungerBar: document.getElementById('hunger-bar'),
    happinessBar: document.getElementById('happiness-bar'),
    energyBar: document.getElementById('energy-bar'),
    coinsDisplay: document.getElementById('coins'),
    xpProgress: document.getElementById('xp-progress'),
    levelDisplay: document.getElementById('level'),
    speechBubble: document.getElementById('speech-bubble'),
    moodLight: document.getElementById('mood-light'),
    notification: document.getElementById('notification'),
    effectsLayer: document.getElementById('effects-layer'),
    feedBtn: document.getElementById('feed-btn'),
    playBtn: document.getElementById('play-btn'),
    careBtn: document.getElementById('care-btn'),
    shopBtn: document.getElementById('shop-btn'),
    shopModal: document.getElementById('shop-modal'),
    inventoryModal: document.getElementById('inventory-modal'),
    particles: document.getElementById('particles')
};

// –§—Ä–∞–∑—ã –ø–∏—Ç–æ–º—Ü–∞
const PHRASES = {
    HAPPY: [
        "–Ø —Ç–∞–∫ —Ç–µ–±—è –ª—é–±–ª—é!",
        "–¢—ã –ª—É—á—à–∏–π —Ö–æ–∑—è–∏–Ω!",
        "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º?",
        "–ì–∞–≤-–≥–∞–≤!",
        "–ü–æ—á–µ—à–∏ –º–Ω–µ –∂–∏–≤–æ—Ç–∏–∫!",
        "–Ø —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –ø—ë—Å–∏–∫!",
        "–¢—ã –º–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥!"
    ],
    HUNGRY: [
        "–Ø –≥–æ–ª–æ–¥–Ω—ã–π!",
        "–•–æ—á—É –≤–∫—É—Å–Ω—è—à–∫—É!",
        "–ü–æ–∫–æ—Ä–º–∏ –º–µ–Ω—è!",
        "–ì–¥–µ –º–æ—è –µ–¥–∞?",
        "üçóüçóüçó",
        "–Ø –±—ã —Å—ä–µ–ª —á—Ç–æ-–Ω–∏–±—É–¥—å...",
        "–ú–æ–π –∂–∏–≤–æ—Ç–∏–∫ —É—Ä—á–∏—Ç!"
    ],
    SAD: [
        "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ...",
        "–¢—ã –º–µ–Ω—è –Ω–µ –ª—é–±–∏—à—å?",
        "–ü–æ—á–µ–º—É —Ç—ã –º–µ–Ω—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å?",
        "–Ø —Å–∫—É—á–∞—é...",
        "üò¢üò¢üò¢",
        "–ú–Ω–µ –æ–¥–∏–Ω–æ–∫–æ...",
        "–¢—ã –∑–∞–±—ã–ª –ø—Ä–æ –º–µ–Ω—è?"
    ],
    TIRED: [
        "–Ø —É—Å—Ç–∞–ª...",
        "–•–æ—á—É —Å–ø–∞—Ç—å...",
        "–ü–æ–∏–≥—Ä–∞–µ–º –ø–æ–∑–∂–µ?",
        "–ú–Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö",
        "üí§üí§üí§",
        "–Ø –µ–ª–µ –¥–µ—Ä–∂—É—Å—å –Ω–∞ –ª–∞–ø–∞—Ö...",
        "–ì–ª–∞–∑–∫–∏ —Å–ª–∏–ø–∞—é—Ç—Å—è..."
    ]
};

// –ó–≤—É–∫–∏
const SOUNDS = {
    CLICK: new Audio('sounds/click.mp3'),
    COIN: new Audio('sounds/coin.mp3'),
    SUCCESS: new Audio('sounds/success.mp3'),
    ERROR: new Audio('sounds/error.mp3'),
    FEED: new Audio('sounds/feed.mp3'),
    PLAY: new Audio('sounds/play.mp3'),
    SLEEP: new Audio('sounds/sleep.mp3')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function initTelegramApp() {
    try {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
        Telegram.WebApp.enableClosingConfirmation();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = Telegram.WebApp.initDataUnsafe?.user;
        if (user) {
            console.log(`–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!`);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        if (Telegram.WebApp.colorScheme === 'dark') {
            document.documentElement.style.setProperty('--text-dark', '#FFFFFF');
            document.documentElement.style.setProperty('--modal-bg', 'rgba(30, 30, 30, 0.9)');
        }
    } catch (e) {
        console.log("Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü —Ñ–æ–Ω–∞
function createParticles() {
    const particleCount = Math.floor(window.innerWidth / 10);
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const size = Math.random() * 5 + 2;
        const posX = Math.random() * window.innerWidth;
        const posY = Math.random() * window.innerHeight;
        const opacity = Math.random() * 0.5 + 0.1;
        const duration = Math.random() * 20 + 10;
        const delay = Math.random() * 20;
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.left = `${posX}px`;
        particle.style.top = `${posY}px`;
        particle.style.opacity = opacity;
        particle.style.animationDuration = `${duration}s`;
        particle.style.animationDelay = `${delay}s`;
        
        DOM.particles.appendChild(particle);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    DOM.hungerBar.style.width = `${game.stats.hunger}%`;
    DOM.happinessBar.style.width = `${game.stats.happiness}%`;
    DOM.energyBar.style.width = `${game.stats.energy}%`;
    DOM.coinsDisplay.textContent = game.coins;
    
    // –û–ø—ã—Ç –∏ —É—Ä–æ–≤–µ–Ω—å
    const xpToLevel = CONFIG.XP.TO_LEVEL * Math.pow(CONFIG.XP.LEVEL_MULTIPLIER, game.level - 1);
    DOM.xpProgress.style.width = `${(game.xp / xpToLevel) * 100}%`;
    DOM.levelDisplay.textContent = game.level;
    
    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    document.getElementById('food-count').textContent = game.inventory.food;
    document.getElementById('toy-count').textContent = game.inventory.toys;
    document.getElementById('clothes-count').textContent = game.inventory.clothes;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    updatePetState();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
function updatePetState() {
    const prevState = game.state;
    
    if (game.stats.hunger < 30 || game.stats.happiness < 30) {
        game.state = CONFIG.STATES.SAD;
    } else if (game.stats.hunger < 60) {
        game.state = CONFIG.STATES.HUNGRY;
    } else if (game.stats.energy < 30) {
        game.state = CONFIG.STATES.TIRED;
    } else {
        game.state = CONFIG.STATES.HAPPY;
    }
    
    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (prevState !== game.state) {
        showRandomPhrase();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    updatePetAppearance();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–∏—Ç–æ–º—Ü–∞
function updatePetAppearance() {
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    let lightColor, lightOpacity;
    
    switch(game.state) {
        case CONFIG.STATES.HAPPY:
            lightColor = 'rgba(120, 115, 245, 0.3)';
            lightOpacity = 0.8;
            break;
        case CONFIG.STATES.HUNGRY:
            lightColor = 'rgba(255, 110, 199, 0.3)';
            lightOpacity = 0.6;
            break;
        case CONFIG.STATES.SAD:
            lightColor = 'rgba(255, 110, 199, 0.2)';
            lightOpacity = 0.4;
            break;
        case CONFIG.STATES.TIRED:
            lightColor = 'rgba(255, 200, 69, 0.3)';
            lightOpacity = 0.5;
            break;
    }
    
    DOM.moodLight.style.background = `radial-gradient(circle, ${lightColor} 0%, rgba(255,255,255,0) 70%)`;
    DOM.moodLight.style.opacity = lightOpacity;
    
    // –ú–∏–∫—Ä–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (game.state === CONFIG.STATES.HAPPY) {
        DOM.pet.classList.add('animate__animated', 'animate__pulse');
        setTimeout(() => {
            DOM.pet.classList.remove('animate__animated', 'animate__pulse');
        }, 1000);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—á—å
function showSpeech(text) {
    if (!game.settings.notifications) return;
    
    DOM.speechBubble.textContent = text;
    DOM.speechBubble.style.opacity = '1';
    DOM.speechBubble.style.top = '20%';
    
    setTimeout(() => {
        DOM.speechBubble.style.opacity = '0';
    }, 2000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(text) {
    if (!game.settings.notifications) return;
    
    DOM.notification.textContent = text;
    DOM.notification.style.opacity = '1';
    
    setTimeout(() => {
        DOM.notification.style.opacity = '0';
    }, 2000);
    
    if (game.settings.sound) {
        SOUNDS.SUCCESS.currentTime = 0;
        SOUNDS.SUCCESS.play().catch(e => console.log("–ó–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω: ", e));
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç
function addXP(amount) {
    const xpToLevel = CONFIG.XP.TO_LEVEL * Math.pow(CONFIG.XP.LEVEL_MULTIPLIER, game.level - 1);
    game.xp += amount;
    
    if (game.xp >= xpToLevel) {
        game.level++;
        game.xp = game.xp - xpToLevel;
        showNotification(`üéâ –£—Ä–æ–≤–µ–Ω—å ${game.level}!`);
        
        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        game.coins += game.level * 50;
        createCoinEffect(10);
        
        if (!game.achievements.firstLevel) {
            game.achievements.firstLevel = true;
            showSpeech("–Ø —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ! –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ!");
        }
    }
    
    updateUI();
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å–µ—Ä–¥–µ—á–µ–∫
function createHearts(count = 5) {
    for (let i = 0; i < count; i++) {
        setTimeout(() => {
            const heart = document.createElement('div');
            heart.className = 'heart-effect';
            heart.innerHTML = '‚ù§Ô∏è';
            heart.style.left = `${40 + Math.random() * 20}%`;
            heart.style.fontSize = `${24 + Math.random() * 12}px`;
            heart.style.animationDuration = `${2 + Math.random()}s`;
            DOM.effectsLayer.appendChild(heart);
            
            setTimeout(() => heart.remove(), 3000);
        }, i * 200);
    }
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –º–æ–Ω–µ—Ç
function createCoinEffect(count = 5) {
    for (let i = 0; i < count; i++) {
        setTimeout(() => {
            const coin = document.createElement('div');
            coin.className = 'coin-effect';
            coin.innerHTML = 'ü™ô';
            coin.style.left = `${40 + Math.random() * 20}%`;
            coin.style.fontSize = `${24 + Math.random() * 12}px`;
            DOM.effectsLayer.appendChild(coin);
            
            setTimeout(() => coin.remove(), 2000);
        }, i * 100);
    }
    
    if (game.settings.sound) {
        SOUNDS.COIN.currentTime = 0;
        SOUNDS.COIN.play().catch(e => console.log("–ó–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω: ", e));
    }
}

// –ö–æ—Ä–º–ª–µ–Ω–∏–µ
function feed() {
    playSound(SOUNDS.CLICK);
    
    if (game.stats.hunger >= 100) {
        showSpeech("–Ø –Ω–µ –≥–æ–ª–æ–¥–µ–Ω!");
        playSound(SOUNDS.ERROR);
        return;
    }
    
    if (game.inventory.food <= 0) {
        showNotification("–ù–µ—Ç –µ–¥—ã! –ö—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ");
        playSound(SOUNDS.ERROR);
        return;
    }
    
    game.inventory.food--;
    game.stats.hunger = Math.min(100, game.stats.hunger + 30);
    game.stats.happiness = Math.min(100, game.stats.happiness + 10);
    game.lastAction = Date.now();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    createHearts(8);
    addXP(CONFIG.XP.PER_ACTION);
    playSound(SOUNDS.FEED);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const originalSrc = DOM.pet.src;
    DOM.pet.src = 'images/dog_eating.png';
    
    setTimeout(() => {
        DOM.pet.src = originalSrc;
        showSpeech("–í–∫—É—Å–Ω–æ! –°–ø–∞—Å–∏–±–æ!");
        updateUI();
    }, 1500);
    
    if (!game.achievements.firstFeed) {
        game.achievements.firstFeed = true;
        showNotification("–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤–ø–µ—Ä–≤—ã–µ!");
        game.coins += 50;
        createCoinEffect(5);
    }
}

// –ò–≥—Ä–∞
function play() {
    playSound(SOUNDS.CLICK);
    
    if (game.stats.energy < 20) {
        showSpeech("–Ø —É—Å—Ç–∞–ª...");
        playSound(SOUNDS.ERROR);
        return;
    }
    
    game.stats.happiness = Math.min(100, game.stats.happiness + 30);
    game.stats.energy = Math.max(0, game.stats.energy - 20);
    game.stats.hunger = Math.max(0, game.stats.hunger - 10);
    game.lastAction = Date.now();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    createHearts(10);
    addXP(CONFIG.XP.PER_ACTION);
    playSound(SOUNDS.PLAY);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const originalSrc = DOM.pet.src;
    DOM.pet.src = 'images/dog_playing.png';
    
    setTimeout(() => {
        DOM.pet.src = originalSrc;
        showSpeech("–≠—Ç–æ –±—ã–ª–æ –≤–µ—Å–µ–ª–æ!");
        updateUI();
    }, 2000);
    
    if (!game.achievements.firstPlay) {
        game.achievements.firstPlay = true;
        showNotification("–£—Ä–∞! –í—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ–∏–≥—Ä–∞–ª–∏ —Å –ø–∏—Ç–æ–º—Ü–µ–º!");
        game.coins += 50;
        createCoinEffect(5);
    }
}

// –£—Ö–æ–¥
function care() {
    playSound(SOUNDS.CLICK);
    
    if (game.stats.energy >= 90) {
        showSpeech("–Ø –Ω–µ —Ö–æ—á—É —Å–ø–∞—Ç—å!");
        playSound(SOUNDS.ERROR);
        return;
    }
    
    game.stats.energy = 100;
    game.stats.happiness = Math.min(100, game.stats.happiness + 15);
    game.stats.hunger = Math.max(0, game.stats.hunger - 10);
    game.lastAction = Date.now();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    addXP(CONFIG.XP.PER_ACTION * 2);
    playSound(SOUNDS.SLEEP);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const originalSrc = DOM.pet.src;
    DOM.pet.src = 'images/dog_sleeping.png';
    
    setTimeout(() => {
        DOM.pet.src = originalSrc;
        showSpeech("–Ø –≤—ã—Å–ø–∞–ª—Å—è!");
        updateUI();
    }, 3000);
}

// –ú–∞–≥–∞–∑–∏–Ω
function openShop() {
    playSound(SOUNDS.CLICK);
    DOM.shopModal.classList.add('active');
}

// –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
function openInventory() {
    playSound(SOUNDS.CLICK);
    DOM.inventoryModal.classList.add('active');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeModal() {
    playSound(SOUNDS.CLICK);
    document.querySelectorAll('.modal').forEach(modal => {
        modal.classList.remove('active');
    });
}

// –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
function buyItem(itemType, price) {
    if (game.coins < price) {
        showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
        playSound(SOUNDS.ERROR);
        return;
    }
    
    game.coins -= price;
    game.inventory[itemType]++;
    
    showNotification(`–í—ã –∫—É–ø–∏–ª–∏ ${getItemName(itemType)}!`);
    playSound(SOUNDS.SUCCESS);
    createCoinEffect(3);
    updateUI();
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
function getItemName(itemType) {
    switch(itemType) {
        case 'food': return '–∫–æ—Ä–º';
        case 'toy': return '–∏–≥—Ä—É—à–∫—É';
        case 'clothes': return '–∫–æ—Å—Ç—é–º';
        default: return '–ø—Ä–µ–¥–º–µ—Ç';
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫
function playSound(sound) {
    if (!game.settings.sound) return;
    
    try {
        sound.currentTime = 0;
        sound.play().catch(e => console.log("–ó–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω: ", e));
    } catch (e) {
        console.log("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: ", e);
    }
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
    const now = Date.now();
    const secondsPassed = (now - game.lastAction) / 1000;
    
    // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    game.stats.hunger = Math.max(0, game.stats.hunger - CONFIG.DECAY_RATES.HUNGER * secondsPassed);
    game.stats.happiness = Math.max(0, game.stats.happiness - CONFIG.DECAY_RATES.HAPPINESS * secondsPassed);
    game.stats.energy = Math.max(0, game.stats.energy - CONFIG.DECAY_RATES.ENERGY * secondsPassed);
    
    game.lastAction = now;
    updateUI();
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    if (Math.random() > 0.95) {
        showRandomPhrase();
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    if (now % (5 * 60 * 1000) < 1000) {
        saveGame();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
function showRandomPhrase() {
    let phrase;
    
    switch(game.state) {
        case CONFIG.STATES.HAPPY:
            phrase = PHRASES.HAPPY[Math.floor(Math.random() * PHRASES.HAPPY.length)];
            break;
        case CONFIG.STATES.HUNGRY:
            phrase = PHRASES.HUNGRY[Math.floor(Math.random() * PHRASES.HUNGRY.length)];
            break;
        case CONFIG.STATES.SAD:
            phrase = PHRASES.SAD[Math.floor(Math.random() * PHRASES.SAD.length)];
            break;
        case CONFIG.STATES.TIRED:
            phrase = PHRASES.TIRED[Math.floor(Math.random() * PHRASES.TIRED.length)];
            break;
        default:
            phrase = "–ì–∞–≤-–≥–∞–≤!";
    }
    
    showSpeech(phrase);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    try {
        localStorage.setItem('superDogGame', JSON.stringify(game));
        console.log("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
    } catch (e) {
        console.log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ", e);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
function loadGame() {
    try {
        const savedGame = localStorage.getItem('superDogGame');
        if (savedGame) {
            const parsedGame = JSON.parse(savedGame);
            Object.assign(game, parsedGame);
            console.log("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
        }
    } catch (e) {
        console.log("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ", e);
    }
}

// –ö–ª–∏–∫ –ø–æ –ø–∏—Ç–æ–º—Ü—É
DOM.pet.addEventListener('click', () => {
    playSound(SOUNDS.CLICK);
    
    if (game.state === CONFIG.STATES.HAPPY) {
        DOM.pet.classList.add('animate__animated', 'animate__bounce');
        setTimeout(() => {
            DOM.pet.classList.remove('animate__animated', 'animate__bounce');
        }, 1000);
        
        showRandomPhrase();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    loadGame();
    initTelegramApp();
    createParticles();
    updateUI();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    DOM.feedBtn.addEventListener('click', feed);
    DOM.playBtn.addEventListener('click', play);
    DOM.careBtn.addEventListener('click', care);
    DOM.shopBtn.addEventListener('click', openShop);
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    document.querySelectorAll('.close-modal').forEach(btn => {
        btn.addEventListener('click', closeModal);
    });
    
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });
    });
    
    // –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
    document.querySelectorAll('.buy-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const item = btn.dataset.item;
            const price = parseInt(btn.dataset.price);
            buyItem(item, price);
        });
    });
    
    // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    setInterval(gameLoop, 10000);
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
        showSpeech("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø—ë—Å–∏–∫!");
    }, 1000);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    window.addEventListener('beforeunload', saveGame);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', initGame);
