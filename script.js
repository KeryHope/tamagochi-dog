// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
const config = {
    prices: {
        food: 10,
        toy: 20,
        clothes: 50,
        premium: 100
    },
    xpPerAction: 5,
    xpToLevel: 100
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const state = {
    stats: {
        hunger: 80,
        happiness: 70,
        energy: 90
    },
    coins: 250,
    xp: 0,
    level: 1,
    currentTab: 'pet',
    petState: 'happy',
    lastActionTime: Date.now(),
    inventory: {
        food: 3,
        toys: 1,
        clothes: 0
    }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const el = {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    hungerBar: document.getElementById('hunger-bar'),
    happinessBar: document.getElementById('happiness-bar'),
    energyBar: document.getElementById('energy-bar'),
    coinsDisplay: document.getElementById('coins'),
    xpProgress: document.getElementById('xp-progress'),
    levelDisplay: document.getElementById('level'),
    
    // –ü–∏—Ç–æ–º–µ—Ü
    petImage: document.getElementById('pet-image'),
    speechBubble: document.getElementById('speech-bubble'),
    moodIndicator: document.getElementById('mood-indicator'),
    
    // –ö–Ω–æ–ø–∫–∏
    feedBtn: document.getElementById('feed-btn'),
    playBtn: document.getElementById('play-btn'),
    sleepBtn: document.getElementById('sleep-btn'),
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    tabButtons: document.querySelectorAll('.tab-btn'),
    screens: document.querySelectorAll('.screen'),
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification: document.getElementById('notification'),
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã
    effectsContainer: document.getElementById('effects-container')
};

// –§—Ä–∞–∑—ã –ø–∏—Ç–æ–º—Ü–∞
const phrases = {
    happy: [
        "–ì–∞–≤-–≥–∞–≤!",
        "–Ø —Ç–µ–±—è –ª—é–±–ª—é!",
        "–ü–æ–∏–≥—Ä–∞–µ–º?",
        "–ü–æ—á–µ—à–∏ –ø—É–∑–∏–∫–æ!",
        "–¢—ã –ª—É—á—à–∏–π —Ö–æ–∑—è–∏–Ω!"
    ],
    hungry: [
        "–Ø –≥–æ–ª–æ–¥–Ω—ã–π!",
        "–•–æ—á—É –µ—Å—Ç—å!",
        "–ì–¥–µ –º–æ—è –µ–¥–∞?",
        "üçóüçóüçó",
        "–ü–æ–∫–æ—Ä–º–∏ –º–µ–Ω—è!"
    ],
    sad: [
        "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ...",
        "–ü–æ—á–µ–º—É —Ç—ã –º–µ–Ω—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å?",
        "–Ø —Å–∫—É—á–∞—é...",
        "üò¢",
        "–ú–Ω–µ –Ω—É–∂–Ω–æ –≤–Ω–∏–º–∞–Ω–∏–µ!"
    ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function initTelegramApp() {
    Telegram.WebApp.ready();
    Telegram.WebApp.expand();
    Telegram.WebApp.enableClosingConfirmation();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    el.hungerBar.style.width = `${state.stats.hunger}%`;
    el.happinessBar.style.width = `${state.stats.happiness}%`;
    el.energyBar.style.width = `${state.stats.energy}%`;
    el.coinsDisplay.textContent = state.coins;
    el.xpProgress.style.width = `${(state.xp / config.xpToLevel) * 100}%`;
    el.levelDisplay.textContent = state.level;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    updatePetState();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
function updatePetState() {
    if (state.stats.hunger < 30 || state.stats.happiness < 30) {
        state.petState = 'sad';
    } else if (state.stats.hunger < 60 || state.stats.happiness < 60) {
        state.petState = 'hungry';
    } else {
        state.petState = 'happy';
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    el.petImage.src = `images/dog_${state.petState}.png`;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    updateMoodIndicator();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
function updateMoodIndicator() {
    let emoji, color;
    
    switch(state.petState) {
        case 'happy':
            emoji = 'üòä';
            color = '#00CEC9';
            break;
        case 'hungry':
            emoji = 'üòã';
            color = '#FDCB6E';
            break;
        case 'sad':
            emoji = 'üò¢';
            color = '#FF7675';
            break;
    }
    
    el.moodIndicator.textContent = emoji;
    el.moodIndicator.style.background = color;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–ª–∞—á–∫–æ —Å —Ä–µ—á—å—é
function showSpeech(text) {
    el.speechBubble.textContent = text;
    el.speechBubble.style.opacity = '1';
    el.speechBubble.style.top = '0';
    
    setTimeout(() => {
        el.speechBubble.style.opacity = '0';
    }, 2000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(text) {
    el.notification.textContent = text;
    el.notification.style.opacity = '1';
    
    setTimeout(() => {
        el.notification.style.opacity = '0';
    }, 2000);
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å–µ—Ä–¥–µ—á–µ–∫
function createHearts(count = 5) {
    for (let i = 0; i < count; i++) {
        setTimeout(() => {
            const heart = document.createElement('div');
            heart.className = 'heart-effect';
            heart.textContent = '‚ù§Ô∏è';
            heart.style.left = `${40 + Math.random() * 20}%`;
            heart.style.fontSize = `${20 + Math.random() * 10}px`;
            heart.style.animationDuration = `${2 + Math.random()}s`;
            el.effectsContainer.appendChild(heart);
            
            setTimeout(() => heart.remove(), 3000);
        }, i * 200);
    }
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –º–æ–Ω–µ—Ç
function createCoins(count = 3) {
    for (let i = 0; i < count; i++) {
        setTimeout(() => {
            const coin = document.createElement('div');
            coin.className = 'coin-effect';
            coin.textContent = 'üí∞';
            coin.style.left = `${30 + Math.random() * 40}%`;
            coin.style.fontSize = `${20 + Math.random() * 10}px`;
            el.effectsContainer.appendChild(coin);
            
            setTimeout(() => coin.remove(), 1000);
        }, i * 100);
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç
function addXP(amount) {
    state.xp += amount;
    
    if (state.xp >= config.xpToLevel) {
        state.level++;
        state.xp = state.xp - config.xpToLevel;
        showNotification(`üéâ –£—Ä–æ–≤–µ–Ω—å ${state.level}!`);
    }
    
    updateUI();
}

// –ö–æ—Ä–º–ª–µ–Ω–∏–µ
function feed() {
    if (state.stats.hunger >= 100) {
        showSpeech("–Ø –Ω–µ –≥–æ–ª–æ–¥–µ–Ω!");
        return;
    }
    
    if (state.inventory.food <= 0) {
        showNotification("–ù–µ—Ç –µ–¥—ã! –ö—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ");
        return;
    }
    
    state.inventory.food--;
    state.stats.hunger = Math.min(100, state.stats.hunger + 30);
    state.stats.happiness = Math.min(100, state.stats.happiness + 10);
    state.lastActionTime = Date.now();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    el.petImage.src = 'images/dog_eating.gif';
    createHearts();
    addXP(config.xpPerAction);
    
    setTimeout(() => {
        updatePetState();
        showSpeech("–í–∫—É—Å–Ω–æ!");
    }, 2000);
    
    updateUI();
}

// –ò–≥—Ä–∞
function play() {
    if (state.stats.energy < 20) {
        showSpeech("–Ø —É—Å—Ç–∞–ª...");
        return;
    }
    
    state.stats.happiness = Math.min(100, state.stats.happiness + 30);
    state.stats.energy = Math.max(0, state.stats.energy - 20);
    state.stats.hunger = Math.max(0, state.stats.hunger - 10);
    state.lastActionTime = Date.now();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    el.petImage.src = 'images/dog_playing.gif';
    createHearts(8);
    addXP(config.xpPerAction);
    
    setTimeout(() => {
        updatePetState();
        showSpeech("–≠—Ç–æ –±—ã–ª–æ –≤–µ—Å–µ–ª–æ!");
    }, 3000);
    
    updateUI();
}

// –°–æ–Ω
function sleep() {
    if (state.petState === 'sleeping') return;
    
    state.petState = 'sleeping';
    el.petImage.src = 'images/dog_sleeping.gif';
    disableButtons();
    
    setTimeout(() => {
        state.stats.energy = 100;
        state.stats.hunger = Math.max(0, state.stats.hunger - 15);
        updatePetState();
        showSpeech("–Ø –≤—ã—Å–ø–∞–ª—Å—è!");
        enableButtons();
        addXP(config.xpPerAction * 2);
    }, 5000);
    
    updateUI();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabId) {
    state.currentTab = tabId;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    el.tabButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.tab === tabId);
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
    el.screens.forEach(screen => {
        screen.classList.toggle('active', screen.dataset.tab === tabId);
    });
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
function disableButtons() {
    el.feedBtn.disabled = true;
    el.playBtn.disabled = true;
    el.sleepBtn.disabled = true;
}

// –í–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
function enableButtons() {
    el.feedBtn.disabled = false;
    el.playBtn.disabled = false;
    el.sleepBtn.disabled = false;
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
    const now = Date.now();
    const hoursPassed = (now - state.lastActionTime) / (1000 * 60 * 60);
    
    if (hoursPassed > 4) {
        state.stats.hunger = Math.max(0, state.stats.hunger - 10);
        state.stats.happiness = Math.max(0, state.stats.happiness - 15);
    } else if (hoursPassed > 2) {
        state.stats.hunger = Math.max(0, state.stats.hunger - 5);
        state.stats.happiness = Math.max(0, state.stats.happiness - 5);
    }
    
    if (state.petState !== 'sleeping') {
        state.stats.energy = Math.max(0, state.stats.energy - 2);
    }
    
    updateUI();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    initTelegramApp();
    updateUI();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    el.feedBtn.addEventListener('click', feed);
    el.playBtn.addEventListener('click', play);
    el.sleepBtn.addEventListener('click', sleep);
    
    // –ö–ª–∏–∫ –ø–æ –ø–∏—Ç–æ–º—Ü—É
    el.petImage.addEventListener('click', () => {
        if (state.petState === 'happy') {
            const randomPhrase = phrases.happy[Math.floor(Math.random() * phrases.happy.length)];
            showSpeech(randomPhrase);
        } else if (state.petState === 'hungry') {
            const randomPhrase = phrases.hungry[Math.floor(Math.random() * phrases.hungry.length)];
            showSpeech(randomPhrase);
        } else if (state.petState === 'sad') {
            const randomPhrase = phrases.sad[Math.floor(Math.random() * phrases.sad.length)];
            showSpeech(randomPhrase);
        }
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    el.tabButtons.forEach(btn => {
        btn.addEventListener('click', () => switchTab(btn.dataset.tab));
    });
    
    // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    setInterval(gameLoop, 60000);
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
        showSpeech("–ü—Ä–∏–≤–µ—Ç, —Ö–æ–∑—è–∏–Ω! –î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å!");
    }, 1000);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', initGame);
